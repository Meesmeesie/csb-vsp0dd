{"version":3,"file":"component---src-pages-404-tsx-c4aefd12eb95355ec9f2.js","mappings":"2KAwDA,IA1Ca,SAAC,GAA6C,IAA3CA,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SACfC,GAASC,EAAAA,EAAAA,KACf,GAAsCC,EAAAA,EAAAA,KAA/BC,EAAP,KAGMC,EAHN,WAGgCC,MAC9B,SAACC,GAAD,OAAmCA,EAAQC,OAGvCC,GAAgBC,EAAAA,EAAAA,GACpBT,EACAI,EAAiBA,EAAeM,QAAU,IAEtCC,GAAoBF,EAAAA,EAAAA,GACxBT,EACAG,EAAiBA,EAAeO,QAAU,IAG5C,OACE,uBAAKE,UAAU,kBACb,0BAAKd,GACL,sBAAIc,UAAU,0BAA0Bb,GACxC,uBAAKa,UAAU,YACb,uBAAKA,UAAU,0BACb,qBAAGA,UAAU,qBAAqBC,KAAML,GAAxC,uBAGA,qBAAGI,UAAU,aACVR,EAAc,WACAA,EAAeM,QAAQI,OAAO,GAD9B,MAEX,GACJ,qBAAGD,KAAMF,GAAT,iBAGJ,gBAAC,EAAAI,KAAD,CAAMH,UAAU,6BAA6BI,GAAG,UAAhD,kB,oGCxCO,SAASC,EAAT,GAAyD,IAAjCC,EAAgC,EAAhCA,SAC/BpB,EAAQ,iBAGd,OACE,gBAAC,IAAD,CAAQA,MAAOA,EAAOoB,SAAUA,EAAUC,YAHxB,6CAIhB,gBAAC,IAAD,CAAMrB,MAAOA,IACb,wBAAMsB,MAAO,CAAEC,MAAO,QAAUT,UAAU,kBACxC,kJAIA,+CAEE,qBAAGC,KAAK,KAAR,iB,mECpBK,SAASJ,EACtBT,EACAU,GAEA,IAAMY,EAAO,2BAA8BZ,EAE3C,OAAIV,IAAWuB,EAAAA,EAAAA,OACND,EAGLtB,IAAWuB,EAAAA,EAAAA,IACHD,EAAV,SAA0BZ,EAA1B,OAGEV,IAAWuB,EAAAA,EAAAA,KAEgC,IAA3CC,UAAUC,WAAWC,QAAQ,WACc,IAA3CF,UAAUC,WAAWC,QAAQ,SAEnBJ,EAAV,SAA0BZ,EAA1B,WAGQY,EAAV,SAA0BZ,EAA1B,WAGQY,EAAV,SAA0BZ,EAA1B","sources":["webpack://nodejs-website/./src/components/Hero/index.tsx","webpack://nodejs-website/./src/pages/404.tsx","webpack://nodejs-website/./src/util/downloadUrlByOS.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport { detectOS } from '../../util/detectOS';\nimport downloadUrlByOS from '../../util/downloadUrlByOS';\nimport { useReleaseHistory, ReleaseData } from '../../hooks/useReleaseHistory';\n\nimport './Hero.scss';\n\ninterface Props {\n  title: string;\n  subTitle?: string;\n}\n\nconst Hero = ({ title, subTitle }: Props): JSX.Element => {\n  const userOS = detectOS();\n  const [currentRelease, ...releases] = useReleaseHistory();\n\n  // find first lts version (first found is last LTS)\n  const lastLTSRelease = releases.find(\n    (release: ReleaseData): boolean => release.lts\n  );\n\n  const ltsVersionUrl = downloadUrlByOS(\n    userOS,\n    lastLTSRelease ? lastLTSRelease.version : ''\n  );\n  const currentVersionUrl = downloadUrlByOS(\n    userOS,\n    currentRelease ? currentRelease.version : ''\n  );\n\n  return (\n    <div className=\"home-page-hero\">\n      <h1>{title}</h1>\n      <h2 className=\"sub-title t-subheading\">{subTitle}</h2>\n      <div className=\"btn-ctas\">\n        <div className=\"download-lts-container\">\n          <a className=\"circular-container\" href={ltsVersionUrl}>\n            Download Node (LTS)\n          </a>\n          <p className=\"t-caption\">\n            {lastLTSRelease\n              ? `Version ${lastLTSRelease.version.substr(1)} - `\n              : ''}\n            <a href={currentVersionUrl}>Get Current</a>\n          </p>\n        </div>\n        <Link className=\"circular-container inverse\" to=\"/learn\">\n          Learn Node\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;\n","import React from 'react';\nimport Hero from '../components/Hero';\nimport Layout from '../components/Layout';\n\ninterface Props {\n  location: Location;\n}\n\nexport default function NotFoundPage({ location }: Props): JSX.Element {\n  const title = 'PAGE NOT FOUND';\n  const description = 'You have hit a route that does not exist.';\n\n  return (\n    <Layout title={title} location={location} description={description}>\n      <Hero title={title} />\n      <main style={{ width: '100%' }} className=\"article-reader\">\n        <p>\n          The page you&apos;re trying to access does not exist. Go back to the\n          Homepage or find what you&apos;re looking for in the menu.\n        </p>\n        <p>\n          Take me back to the\n          <a href=\"/\">Homepage</a>\n        </p>\n      </main>\n    </Layout>\n  );\n}\n","import { UserOS } from './detectOS';\n\nexport default function downloadUrlByOS(\n  userOS: UserOS,\n  version: string\n): string {\n  const baseURL = `https://nodejs.org/dist/${version}`;\n\n  if (userOS === UserOS.MOBILE) {\n    return baseURL;\n  }\n\n  if (userOS === UserOS.MAC) {\n    return `${baseURL}/node-${version}.pkg`;\n  }\n\n  if (userOS === UserOS.WIN) {\n    if (\n      navigator.appVersion.indexOf('WOW64') !== -1 ||\n      navigator.appVersion.indexOf('Win64') !== -1\n    ) {\n      return `${baseURL}/node-${version}-x64.msi`;\n    }\n\n    return `${baseURL}/node-${version}-x86.msi`;\n  }\n\n  return `${baseURL}/node-${version}.tar.gz`;\n}\n"],"names":["title","subTitle","userOS","detectOS","useReleaseHistory","currentRelease","lastLTSRelease","find","release","lts","ltsVersionUrl","downloadUrlByOS","version","currentVersionUrl","className","href","substr","Link","to","NotFoundPage","location","description","style","width","baseURL","UserOS","navigator","appVersion","indexOf"],"sourceRoot":""}